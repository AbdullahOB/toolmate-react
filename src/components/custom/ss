"use client";
import React, { useMemo, useCallback, useRef, useState } from "react";
import { useEffect } from "react";
import { motion, AnimatePresence, useReducedMotion } from "framer-motion";
import {
  Send,
  ImageIcon,
  Sparkles,
  XCircle,
  Wrench,
  ThumbsUp,
  ThumbsDown,
  Flag,
  MoreHorizontal,
  Zap,
  Star,
  Shield,
  Hammer,
  Minimize,
} from "lucide-react";
import { useSubscription } from "@/context/SubscriptionDetailsContext";
import BudgetSlider from "./BudgetSlider";
import BudgetTab from "./BudgetSlider/BudgetTab";
import ChatSidebar from "./BudgetSlider/ChatSidebar";
import { useLocation } from "react-router-dom";
import { ReportModal } from "./flag features/ReportModal";
import { useAppContext } from "@/context/AppContext";
import ExplanationModal from "./flag features/ExplanationModal";

// Constants
const MAX_FREE_UPLOADS = 2;
const MOBILE_BREAKPOINT = 768;

// Custom hooks
const useResponsiveState = () => {
  const [dimensions, setDimensions] = useState({
    width: typeof window !== "undefined" ? window.innerWidth : 0,
    height: typeof window !== "undefined" ? window.innerHeight : 0,
    isMobile:
      typeof window !== "undefined"
        ? window.innerWidth <= MOBILE_BREAKPOINT
        : false,
  });

  useEffect(() => {
    const updateDimensions = () => {
      const width = window.innerWidth;
      const height = window.innerHeight;
      setDimensions({
        width,
        height,
        isMobile: width <= MOBILE_BREAKPOINT,
      });
    };

    updateDimensions();
    window.addEventListener("resize", updateDimensions);
    return () => window.removeEventListener("resize", updateDimensions);
  }, []);

  return dimensions;
};

// Animation variants
const createAnimationVariants = (
  isMobile: boolean,
  shouldReduceMotion: boolean
) => ({
  mobile: {
    initial:
      isMobile || shouldReduceMotion ? { opacity: 0 } : { y: 20, opacity: 0 },
    animate:
      isMobile || shouldReduceMotion ? { opacity: 1 } : { y: 0, opacity: 1 },
    exit:
      isMobile || shouldReduceMotion ? { opacity: 0 } : { y: -10, opacity: 0 },
    transition:
      isMobile || shouldReduceMotion ? { duration: 0.2 } : { duration: 0.5 },
  },
  message: {
    initial:
      isMobile || shouldReduceMotion ? { opacity: 0 } : { opacity: 0, y: 18 },
    animate:
      isMobile || shouldReduceMotion ? { opacity: 1 } : { opacity: 1, y: 0 },
    transition:
      isMobile || shouldReduceMotion ? { duration: 0.15 } : { duration: 0.3 },
  },
});

// Product card styling helper
const getProductCardStyle = (productName: string) => {
  const name = productName.toLowerCase();
  const configs = [
    {
      keywords: [
        "drill",
        "driver",
        "rotary hammer",
        "impact",
        "contractor",
        "industrial",
        "oscillating",
        "tool system",
        "multi-tool",
      ],
      gradient: "from-slate-100 to-slate-200",
      icon: Zap,
    },
    {
      keywords: ["anchor", "mounting", "hardware", "screw", "fastener"],
      gradient: "from-blue-50 to-blue-100",
      icon: Star,
    },
    {
      keywords: ["level", "stud", "measuring", "tape"],
      gradient: "from-emerald-50 to-emerald-100",
      icon: Sparkles,
    },
    {
      keywords: ["safety", "glasses", "gloves", "kit", "protection"],
      gradient: "from-red-50 to-red-100",
      icon: Shield,
    },
    {
      keywords: ["hammer"],
      gradient: "from-yellow-50 to-yellow-100",
      icon: Hammer,
    },
    {
      keywords: ["screwdriver", "tool", "set", "collection", "kit"],
      gradient: "from-indigo-50 to-indigo-100",
      icon: Wrench,
    },
  ];

  for (const config of configs) {
    if (config.keywords.some((keyword) => name.includes(keyword))) {
      return { gradient: config.gradient, icon: config.icon };
    }
  }

  return { gradient: "from-slate-100 to-slate-200", icon: Wrench };
};

// ProductCard component
const ProductCard = React.memo(
  ({
    product,
    isMobile,
    setCurrentToolName,
    setCurrentExplanation,
    setShowExplanationModal,
  }: any) => {
    const { gradient, icon: DecorativeIcon } = getProductCardStyle(
      product.name
    );

    return (
      <motion.div
        className={`relative flex flex-col justify-between rounded-2xl p-4 flex-shrink-0 bg-gradient-to-br ${gradient} shadow-lg hover:shadow-xl transition-all duration-300 border border-white/50 backdrop-blur-sm min-w-[150px]`}
        whileHover={isMobile ? {} : { scale: 1.02 }}
      >
        {!isMobile && (
          <motion.div
            className="absolute top-2 right-2 opacity-20"
            animate={{ rotate: 360 }}
            transition={{ duration: 8, repeat: Infinity, ease: "linear" }}
          >
            <DecorativeIcon size={14} className="text-gray-700" />
          </motion.div>
        )}

        <div className="relative z-10">
          <motion.div
            className="relative overflow-hidden rounded-xl w-full h-24 flex items-center justify-center bg-white/30 backdrop-blur-sm border border-white/40 mb-3"
            whileHover={isMobile ? {} : { scale: 1.05 }}
          >
            <img
              src={
                product.assets ||
                `https://placehold.co/100x100/eeeeee/cccccc?text=${product.name}`
              }
              alt={product.name}
              className="w-full h-full object-contain p-2"
            />
          </motion.div>

          <p
            className="font-bold text-gray-700 text-sm text-center leading-tight mb-3"
            title={product.name}
          >
            {product.name}
          </p>
        </div>

        <motion.button
          whileTap={{ scale: 0.95 }}
          className="relative px-3 py-2 bg-white text-black rounded-full text-xs font-semibold hover:bg-yellow-100 shadow-md backdrop-blur-sm transition-all duration-300 overflow-hidden group"
          onClick={() => {
            setCurrentToolName(product.name);
            setCurrentExplanation(
              "Picked this one 'cause it's reliable, easy to use, and works well for most basic jobs. Good match if you're not going too heavy."
            );
            setShowExplanationModal(true);
          }}
        >
          <span className="relative z-10 flex items-center gap-1 justify-center">
            <Sparkles
              size={12}
              className={isMobile ? "" : "group-hover:animate-pulse"}
            />
            Tell me why
          </span>
        </motion.button>
      </motion.div>
    );
  }
);

// Main component
export default function HeroChat() {
  // Refs
  const inputRef = useRef<HTMLInputElement>(null);
  const chatContainerRef = useRef<HTMLDivElement>(null);

  // Hooks
  const location = useLocation();
  const shouldReduceMotion = useReducedMotion();
  const { width, height, isMobile } = useResponsiveState();
  const { subscriptionData } = useSubscription();

  // Context
  const {
    messages,
    inputValue,
    setInputValue,
    isTyping,
    showEmojiBubble,
    currentEmoji,
    isCompletingText,
    imagePreview,
    isCompressingImage,
    suggestedPrompts,
    showSuggestions,
    uploadCount,
    showUploadButton,
    showPrompt,
    showBudgetSlider,
    budgetCompleted,
    showBudgetTab,
    estimatedBaseCost,
    activeMessageId,
    copiedMessageId,
    fileInputRef,
    scrollContainerRef,
    handleSendMessage,
    handleKeyDown,
    getSuggestionsForInput,
    handleFileChange,
    clearImagePreview,
    handlePromptClick,
    clearChatHistory,
    renderMateyExpression,
    handleFileUpload,
    handleBudgetChange,
    handleBudgetTabSelect,
    handleBudgetComplete,
    handleBudgetCancel,
    handleTouchStart,
    handleTouchEnd,
    setIsMobileChatOpened,
    isMobileChatOpened,
    isChatFullScreen,
    setIsChatFullScreen,
    selectedPrompt,
    setIsMobileFullHeight,
    isMobileFullHeight,
    setActiveMessageId,
    setCopiedMessageId,
    showExplanationModal,
    setShowExplanationModal,
    setCurrentExplanation,
    setCurrentToolName,
    setHoveredMessageId,
    setShowReportModal,
    hoveredMessageId,
    setShowDropdown,
    showDropdown,
    handleDropdownAction,
    feedbackAnimations,
    showReportModal,
    onClose,
    currentToolName,
    currentExplanation,
  } = useAppContext();

  // Animation variants
  const animationVariants = useMemo(
    () => createAnimationVariants(isMobile, shouldReduceMotion),
    [isMobile, shouldReduceMotion]
  );

  // Random prompts
  const randomPrompts = useMemo(() => {
    const prompts = [
      "Don't own a level? No worries.",
      "Need to hang something heavy?",
      "Not sure what tool you need?",
      "Just moved into a rental?",
      "Want to paint over old walls?",
      "Want to fix a squeaky door?",
      "Planning to drill into tiles?",
      "Worried about hitting a pipe?",
      "First time using a power tool?",
      "Worried about cracking the wall?",
      "Gave up halfway? Let's sort it.",
      "Don't know where to start?",
      "Never touched a drill?",
      "No idea where to start?",
      "Mounting a mirror on brick?",
    ];
    const shuffled = [...prompts].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, 3);
  }, []);

  // Last matey message
  const mateyOutput = useMemo(
    () => messages.filter((msg) => msg.sender === "matey").slice(-1)[0],
    [messages]
  );

  // Chat container height calculation - optimized for frame view
  const getChatContainerHeight = useCallback(() => {
    if (isChatFullScreen) return "h-[calc(100vh-140px)]"; // Optimized for full screen

    // Optimized heights to match MobileMock adjustments
    const baseHeight = height < 660 ? 320 : 380; // Reduced to fit better with Matey
    return `h-[${baseHeight}px]`;
  }, [height, isChatFullScreen]);

  // Auto-scroll to bottom when new messages arrive
  useEffect(() => {
    setIsMobileChatOpened(true);
    if (chatContainerRef.current) {
      chatContainerRef.current.scrollTop =
        chatContainerRef.current.scrollHeight;
    }
  }, [messages, isTyping, setIsMobileChatOpened]);

  // Handle input focus for mobile - optimized
  const handleInputFocus = useCallback(() => {
    if (isMobile) {
      setIsMobileChatOpened(true);
      setIsChatFullScreen(true);

      // Smooth focus with proper timing
      setTimeout(() => {
        inputRef.current?.scrollIntoView({
          behavior: "smooth",
          block: "center",
        });
      }, 100);
    }
  }, [isMobile, setIsMobileChatOpened, setIsChatFullScreen]);

  // Handle input blur for mobile
  const handleInputBlur = useCallback(() => {
    // Let MobileMock handle this based on keyboard state
  }, []);

  // Handle exit full screen
  const exitFullScreen = useCallback(() => {
    setIsChatFullScreen(false);
    inputRef.current?.blur();
  }, [setIsChatFullScreen]);

  const exitMobileChat = useCallback(() => {
    setIsMobileChatOpened(false);
    setIsChatFullScreen(false);
  }, [setIsMobileChatOpened, setIsChatFullScreen]);

  // Main container classes
  const mainContainerClasses = `
    relative w-full h-full flex flex-col
    bg-gradient-to-br from-yellow/10 to-softYellow/20 backdrop-blur-sm
    transition-all duration-300 ease-in-out
    ${
      isChatFullScreen
        ? "rounded-none"
        : "md:rounded-[1.8rem] rounded-2xl shadow-xl border-2 border-yellow/50"
    }
    overflow-hidden
  `;

  return (
    <div className={mainContainerClasses}>
      {/* Header */}
      <div className="bg-gradient-to-r from-yellow to-softYellow p-2 md:p-4 flex items-center gap-4 flex-shrink-0 z-10 matey-header">
        <div className="flex items-center gap-4">
          <motion.div className="sm:w-16 sm:h-16 w-12 h-12 rounded-full bg-white p-1 overflow-hidden relative shadow-lg">
            <img
              src="/assets/matey-emoji/smile.svg"
              alt="Matey"
              className="w-full h-full object-cover rounded-full"
              onError={(e) =>
                (e.currentTarget.src =
                  "https://placehold.co/64x64/FBBF24/FFFFFF?text=M")
              }
            />
            <AnimatePresence>
              {showEmojiBubble && !isMobile && (
                <motion.div
                  className="absolute -top-16 -right-8 bg-white rounded-full p-3 shadow-lg border-2 border-yellow"
                  initial={{ scale: 0, opacity: 0 }}
                  animate={{ scale: 1, opacity: 1 }}
                  exit={{ scale: 0, opacity: 0 }}
                  transition={{ type: "spring", damping: 12 }}
                  style={{ borderRadius: "60% 40% 50% 45%" }}
                >
                  <div className="w-10 h-10">
                    {renderMateyExpression(currentEmoji)}
                  </div>
                  <motion.div
                    className="absolute -bottom-2 right-6 w-4 h-4 bg-white border-r-2 border-b-2 border-yellow transform rotate-45"
                    initial={{ opacity: 0 }}
                    animate={{ opacity: 1 }}
                    exit={{ opacity: 0 }}
                  />
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>

          <div className="flex flex-col">
            <motion.h2
              className="font-bold text-black text-xl sm:text-2xl"
              initial={{ opacity: 1 }}
              whileHover={isMobile ? {} : { scale: 1.05 }}
              transition={{ duration: 0.1 }}
            >
              Matey
            </motion.h2>
            <p className="text-black/70 text-start text-sm sm:text-md font-medium tagline !block">
              Knows Tools Talks Straight
            </p>
          </div>
        </div>

        <div className="ml-auto flex items-center gap-3">
          <motion.button
            whileHover={isMobile ? {} : { scale: 1.1 }}
            whileTap={{ scale: 0.9 }}
            className="p-3 bg-white/80 text-black hover:bg-yellow/80 rounded-full shadow-md"
            onClick={clearChatHistory}
            title="Clear chat history"
            style={{ borderRadius: "60% 40% 50% 45%" }}
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              strokeWidth="2"
              strokeLinecap="round"
              strokeLinejoin="round"
            >
              <path d="M3 6h18"></path>
              <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
              <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
            </svg>
          </motion.button>

          {(isMobileChatOpened || isChatFullScreen) && (
            <motion.button
              whileHover={isMobile ? {} : { scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
              className="p-3 bg-white/80 text-black hover:bg-yellow/80 rounded-full shadow-md"
              onClick={isChatFullScreen ? exitFullScreen : exitMobileChat}
              title={isChatFullScreen ? "Minimize" : "Exit chat"}
              style={{ borderRadius: "60% 40% 50% 45%" }}
            >
              {isChatFullScreen ? (
                <Minimize size={20} />
              ) : (
                <XCircle size={20} />
              )}
            </motion.button>
          )}
        </div>
      </div>

      {/* Chat Container */}
      <div
        ref={chatContainerRef}
        className={`flex-1 overflow-y-auto ${getChatContainerHeight()} px-3 py-4 bg-white/40 scroll-smooth`}
      >
        <AnimatePresence mode="popLayout">
          {messages.map((message) => (
            <motion.div
              key={message.id}
              initial={animationVariants.message.initial}
              animate={animationVariants.message.animate}
              transition={animationVariants.message.transition}
              className="mb-6"
              onMouseEnter={() => !isMobile && setHoveredMessageId(message.id)}
              onMouseLeave={() => {
                if (!isMobile) {
                  setHoveredMessageId(null);
                  setShowDropdown(null);
                }
              }}
            >
              {/* Message content */}
              <div
                className={`flex relative ${
                  message.sender === "user" ? "justify-end" : "justify-start"
                } ${message.sender === "matey" ? "items-start" : "items-end"}`}
              >
                {message.sender === "matey" && (
                  <div
                    className={`w-10 h-10 sm:w-12 sm:h-12 rounded-full flex-shrink-0 overflow-hidden mr-3 ${
                      message.id === "1" ? "invisible" : "visible"
                    }`}
                  >
                    {renderMateyExpression(message.expression)}
                  </div>
                )}

                <motion.div
                  whileHover={isMobile ? {} : { scale: 1.02 }}
                  onClick={() => {
                    if (isMobile) {
                      handleTouchStart(message.id);
                    }
                  }}
                  onTouchStart={() => {
                    if (message.text && message.text.length <= 35) {
                      navigator.clipboard.writeText(message.text);
                    }
                  }}
                  onTouchEnd={handleTouchEnd}
                  onTouchCancel={handleTouchEnd}
                  className={`relative max-w-[85%] p-4 rounded-2xl border shadow-lg ${
                    message.sender === "user"
                      ? "bg-lightYellow text-black border-yellow rounded-tr-none ml-auto"
                      : message.id === "1" && message.sender === "matey"
                      ? "bg-white border-gray-300 rounded-3xl"
                      : "bg-white border-gray-300 rounded-tl-none"
                  }`}
                >
                  {/* Message tails */}
                  {message.id === "1" &&
                    message.sender === "matey" &&
                    messages.length > 1 && (
                      <div className="absolute -bottom-2 left-6 transform -translate-x-1/2 w-4 h-4 bg-white border-r-2 border-b-2 border-gray-300 rotate-45" />
                    )}

                  {message.sender === "user" && (
                    <div className="absolute -bottom-2 right-6 transform translate-x-1/2 w-4 h-4 bg-lightYellow border-r-2 border-b-2 border-yellow rotate-45" />
                  )}

                  {message.sender === "matey" && message.id !== "1" && (
                    <div className="absolute -bottom-2 left-6 transform -translate-x-1/2 w-4 h-4 bg-white border-r-2 border-b-2 border-gray-300 rotate-45" />
                  )}

                  {message.isImage && message.imageUrl && (
                    <div className="mb-3">
                      <img
                        src={message.imageUrl || "/placeholder.svg"}
                        alt="User uploaded"
                        className="rounded-lg max-h-60 w-auto"
                        style={{ borderRadius: "15px 25px 5px 20px" }}
                      />
                    </div>
                  )}

                  {message.text && (
                    <p className="text-start text-base sm:text-lg leading-relaxed">
                      {message.text}
                    </p>
                  )}

                  {/* Message actions for mobile */}
                  <AnimatePresence>
                    {activeMessageId === message.id && (
                      <motion.div
                        initial={{ height: 0, opacity: 0 }}
                        animate={{ height: "auto", opacity: 1 }}
                        exit={{ height: 0, opacity: 0 }}
                        transition={{
                          duration: isMobile ? 0.2 : 0.3,
                          ease: "easeInOut",
                        }}
                        className="border-t border-gray-200 bg-gray-50 mt-3 -mx-4 -mb-4"
                      >
                        <div className="p-3 flex flex-col gap-2">
                          {message.sender === "matey" && (
                            <button
                              onClick={() => {
                                navigator.clipboard.writeText(
                                  message.text || ""
                                );
                                setCopiedMessageId(message.id);
                                setTimeout(() => {
                                  setCopiedMessageId(null);
                                  setActiveMessageId(null);
                                }, 1500);
                              }}
                              className={`text-sm font-medium px-3 py-2 rounded-md border transition-all duration-200 shadow-sm ${
                                copiedMessageId === message.id
                                  ? "bg-green-100 text-green-700 border-green-300"
                                  : "bg-gray-50 text-gray-700 border-gray-200 hover:bg-gray-100"
                              }`}
                            >
                              {copiedMessageId === message.id
                                ? "Too easy, it's copied!"
                                : "Copy this!"}
                            </button>
                          )}
                          <button
                            onClick={() => setShowReportModal(true)}
                            className="text-sm font-medium px-3 py-2 rounded-md border transition-all duration-200 shadow-sm bg-red-50 text-red-700 border-red-200 hover:bg-red-100"
                          >
                            Report
                          </button>
                        </div>
                      </motion.div>
                    )}
                  </AnimatePresence>
                </motion.div>

                {/* Desktop 3-dot menu */}
                <AnimatePresence>
                  {!isMobile &&
                    hoveredMessageId === message.id &&
                    message.sender === "matey" && (
                      <motion.div
                        initial={{ opacity: 0, scale: 0.8 }}
                        animate={{ opacity: 1, scale: 1 }}
                        exit={{ opacity: 0, scale: 0.8 }}
                        className={`absolute ${
                          message.id === "1" && message.sender === "matey"
                            ? "right-[5.5rem]"
                            : "right-10"
                        } top-3 ml-2`}
                      >
                        <button
                          onClick={() =>
                            setShowDropdown(
                              showDropdown === message.id ? null : message.id
                            )
                          }
                          className="hover:scale-90 duration-200 p-1"
                        >
                          <MoreHorizontal size={16} className="text-black" />
                        </button>

                        <AnimatePresence>
                          {showDropdown === message.id &&
                            message.sender === "matey" && (
                              <motion.div
                                initial={{ opacity: 0, y: -10, scale: 0.95 }}
                                animate={{ opacity: 1, y: 0, scale: 1 }}
                                exit={{ opacity: 0, y: -10, scale: 0.95 }}
                                className="absolute top-full right-0 mt-2 w-48 bg-white rounded-lg shadow-xl border border-gray-200 py-2 z-50"
                              >
                                <p className="w-full px-4 py-2 text-left text-sm text-gray-700">
                                  Rate this message
                                </p>
                                <button
                                  onClick={() =>
                                    handleDropdownAction(
                                      "helpful",
                                      message.id,
                                      message.text,
                                      message.timestamp
                                    )
                                  }
                                  className={`w-full px-4 py-2 text-left text-sm ${
                                    feedbackAnimations[message.id] === "helpful"
                                      ? "text-green-500"
                                      : "text-gray-700"
                                  } hover:bg-green-50 hover:text-green-700 transition-colors flex items-center gap-2 relative`}
                                >
                                  <motion.div
                                    animate={
                                      feedbackAnimations[message.id] ===
                                      "helpful"
                                        ? {
                                            scale: [1, 1.3, 1],
                                            rotate: [0, 10, -10, 0],
                                          }
                                        : {}
                                    }
                                    transition={{
                                      duration: 0.6,
                                      ease: "easeInOut",
                                    }}
                                  >
                                    <ThumbsUp size={14} />
                                  </motion.div>
                                  Helpful
                                  {feedbackAnimations[message.id] ===
                                    "helpful" && (
                                    <motion.div
                                      initial={{ scale: 0, opacity: 0 }}
                                      animate={{ scale: 1, opacity: 1 }}
                                      exit={{ scale: 0, opacity: 0 }}
                                      className="absolute right-2 text-green-500"
                                    >
                                      ✓
                                    </motion.div>
                                  )}
                                </button>
                                <button
                                  onClick={() =>
                                    handleDropdownAction(
                                      "unhelpful",
                                      message.id,
                                      message.text,
                                      message.timestamp
                                    )
                                  }
                                  className={`w-full px-4 py-2 text-left text-sm ${
                                    feedbackAnimations[message.id] ===
                                    "unhelpful"
                                      ? "text-red-500"
                                      : "text-gray-700"
                                  } hover:bg-red-50 hover:text-red-700 transition-colors flex items-center gap-2 relative`}
                                >
                                  <motion.div
                                    animate={
                                      feedbackAnimations[message.id] ===
                                      "unhelpful"
                                        ? {
                                            scale: [1, 1.3, 1],
                                            rotate: [0, -10, 10, 0],
                                          }
                                        : {}
                                    }
                                    transition={{
                                      duration: 0.6,
                                      ease: "easeInOut",
                                    }}
                                  >
                                    <ThumbsDown size={14} />
                                  </motion.div>
                                  Unhelpful
                                  {feedbackAnimations[message.id] ===
                                    "unhelpful" && (
                                    <motion.div
                                      initial={{ scale: 0, opacity: 0 }}
                                      animate={{ scale: 1, opacity: 1 }}
                                      exit={{ scale: 0, opacity: 0 }}
                                      className="absolute right-2 text-red-500"
                                    >
                                      ✓
                                    </motion.div>
                                  )}
                                </button>
                                <button
                                  onClick={() => handleDropdownAction("report")}
                                  className="w-full px-4 py-2 text-left text-sm text-gray-700 hover:bg-red-50 hover:text-red-700 transition-colors flex items-center gap-2"
                                >
                                  <Flag size={14} />
                                  Report
                                </button>
                              </motion.div>
                            )}
                        </AnimatePresence>
                      </motion.div>
                    )}
                </AnimatePresence>
              </div>

              {/* Tool suggestions */}
              {message.isToolSuggestion && message.products && (
                <motion.div
                  style={{ borderRadius: "0px 35px 0px 25px" }}
                  className="mt-4 w-[90%] ml-8 sm:ml-12 bg-gradient-to-r from-paleYellow to-white border-2 border-yellow rounded-xl p-3 sm:p-4 shadow-lg"
                >
                  <div className="flex gap-3 mb-3 items-center">
                    <div className="bg-yellow p-2 rounded-full">
                      <Wrench className="text-white" size={20} />
                    </div>
                    <p className="font-bold sm:text-lg text-md">
                      Tools Recommendation
                    </p>
                  </div>
                  <div className="flex gap-3 overflow-x-auto pb-2 px-1">
                    {message.products.map((product, idx) => (
                      <ProductCard
                        key={idx}
                        product={product}
                        isMobile={isMobile}
                        setCurrentToolName={setCurrentToolName}
                        setCurrentExplanation={setCurrentExplanation}
                        setShowExplanationModal={setShowExplanationModal}
                      />
                    ))}
                  </div>
                </motion.div>
              )}
            </motion.div>
          ))}

          {/* Typing indicator */}
          {isTyping && (
            <motion.div
              key="typing-indicator"
              initial={{ opacity: 0, y: 10 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -10 }}
              className="mb-6 flex justify-start items-start"
            >
              <div className="w-10 h-10 sm:w-12 sm:h-12 rounded-full mr-3 flex-shrink-0 overflow-hidden">
                {renderMateyExpression("thinking")}
              </div>
              <div className="bg-white p-4 shadow-lg rounded-2xl rounded-tl-none border border-gray-300 relative">
                <div className="absolute -bottom-2 left-6 transform -translate-x-1/2 w-4 h-4 bg-white border-r-2 border-b-2 border-gray-300 rotate-45" />

                <div className="flex space-x-1">
                  {[0, 0.2, 0.4].map((delay, index) => (
                    <motion.div
                      key={index}
                      animate={{ y: [0, -5, 0] }}
                      transition={{
                        repeat: Infinity,
                        duration: 0.6,
                        delay,
                      }}
                      className="w-2 h-2 bg-yellow rounded-full"
                    />
                  ))}
                </div>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Suggested prompts */}
      {showPrompt && (
        <div className="p-3 bg-white/70 border-t border-yellow/30 relative">
          <div
            ref={scrollContainerRef}
            className="flex gap-3 md:flex-wrap overflow-x-auto"
          >
            {randomPrompts.map((prompt, index) => (
              <button
                key={index}
                style={{
                  borderRadius:
                    index % 2 === 0
                      ? "20px 10px 25px 15px"
                      : "15px 25px 10px 20px",
                }}
                className="px-4 py-2 bg-paleYellow text-black rounded-full text-md md:text-lg whitespace-nowrap flex-shrink-0 border-2 border-yellow hover:bg-lightYellow transition-colors"
                onClick={() => handlePromptClick(prompt)}
              >
                {prompt}
              </button>
            ))}
          </div>
          <div className="absolute top-0 block md:hidden right-0 h-full w-16 pointer-events-none bg-gradient-to-l from-lightYellow/70 to-transparent" />
        </div>
      )}

      {/* Chat sidebar */}
      <ChatSidebar currentInput={inputValue} mateyOutput={mateyOutput} />

      {/* Budget components */}
      {showBudgetTab && (
        <BudgetTab
          onSelect={handleBudgetTabSelect}
          baseCost={estimatedBaseCost}
          onCancel={handleBudgetCancel}
          location={location.pathname}
        />
      )}

      {showBudgetSlider && (
        <div className="px-4 pt-2">
          <BudgetSlider
            onBudgetChange={handleBudgetChange}
            isActive={showBudgetSlider && !budgetCompleted}
            onComplete={handleBudgetComplete}
            onCancel={handleBudgetCancel}
            showBudget={() => {}}
            baseCost={estimatedBaseCost}
          />
        </div>
      )}

      {/* Upload limit message */}
      {!showUploadButton &&
        !subscriptionData &&
        uploadCount >= MAX_FREE_UPLOADS && (
          <div className="text-center text-sm text-gray-500 mt-1 mb-2">
            <span className="flex items-center justify-center gap-1">
              <ImageIcon size={14} /> You've used all {MAX_FREE_UPLOADS}{" "}
              uploads.
            </span>
          </div>
        )}

      {/* Image preview */}
      <AnimatePresence>
        {imagePreview && (
          <motion.div
            initial={{ opacity: 0, scale: 0.95 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.95 }}
            transition={{ duration: isMobile ? 0.2 : 0.3 }}
            className="fixed bottom-20 left-1/2 transform -translate-x-1/2 w-full max-w-md px-4 z-50"
          >
            <motion.div
              className="relative bg-white p-4 rounded-lg border border-yellow/30 shadow-lg"
              layout
            >
              <div className="flex flex-col items-center">
                <p className="text-sm text-gray-600 mb-2">
                  Your photo is ready to send!
                </p>
                <img
                  src={imagePreview || "/placeholder.svg"}
                  alt="Preview"
                  className="w-full h-auto max-h-40 object-contain rounded-lg border-2 border-yellow shadow-md"
                />
              </div>
              <motion.button
                whileHover={isMobile ? {} : { scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                style={{ borderRadius: "60% 40% 50% 45%" }}
                className="absolute top-2 right-2 bg-white rounded-full p-1.5 shadow-md hover:bg-gray-100"
                onClick={clearImagePreview}
              >
                <XCircle size={20} className="text-red-500" />
              </motion.button>
            </motion.div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Input section */}
      <div className="p-3 sm:p-4 bg-white border-t border-yellow/30 sticky bottom-0 z-10">
        <div className="flex items-center gap-3">
          {/* Upload button */}
          {(subscriptionData ||
            (showUploadButton && uploadCount < MAX_FREE_UPLOADS)) && (
            <motion.button
              whileHover={isMobile ? {} : { scale: 1.1, rotate: 15 }}
              whileTap={{ scale: 0.9 }}
              style={{ borderRadius: "60% 40% 50% 45%" }}
              className="p-3 bg-paleYellow text-orange hover:bg-yellow hover:text-white rounded-full shadow-md relative group flex-shrink-0 transition-colors duration-200"
              onClick={handleFileUpload}
              title="Upload an image"
              disabled={isCompressingImage}
            >
              {isCompressingImage ? (
                <div className="animate-spin h-4 w-4 border-2 border-orange border-t-transparent rounded-full" />
              ) : (
                <ImageIcon size={18} />
              )}
              <input
                type="file"
                ref={fileInputRef}
                className="hidden"
                accept="image/*"
                onChange={handleFileChange}
              />
            </motion.button>
          )}

          {/* Input field */}
          <div className="flex-1 relative">
            <div className="relative input-wrapper w-full">
              <input
                ref={inputRef}
                value={inputValue}
                onFocus={handleInputFocus}
                onBlur={handleInputBlur}
                onChange={(e) => {
                  setInputValue(e.target.value);
                  getSuggestionsForInput(e.target.value);
                }}
                style={{ borderRadius: "20px 30px 15px 25px" }}
                onKeyDown={handleKeyDown}
                placeholder="What are ya tackling today?"
                className="w-full p-3 text-base sm:text-lg rounded-xl border-2 border-yellow/30 bg-transparent shadow-inner focus:outline-none focus:ring-4 focus:ring-yellow focus:ring-opacity-40 focus:shadow-inner transition-all duration-300 ease-in-out relative z-10 min-h-[48px] resize-none"
              />

              {/* Input suggestions */}
              <AnimatePresence>
                {showSuggestions && inputValue.trim() !== "" && (
                  <motion.div
                    initial={{ opacity: 0, y: -10 }}
                    animate={{ opacity: 1, y: 0 }}
                    exit={{ opacity: 0, y: -10 }}
                    transition={{ duration: isMobile ? 0.15 : 0.3 }}
                    style={{ borderRadius: "25px 15px 20px 30px" }}
                    className="absolute left-0 right-0 bottom-full mb-2 bg-white rounded-xl shadow-lg border-2 border-yellow/30 z-20 overflow-hidden max-h-60 overflow-y-auto"
                  >
                    {suggestedPrompts.map((prompt, index) => (
                      <motion.div
                        key={index}
                        initial={animationVariants.message.initial}
                        animate={animationVariants.message.animate}
                        transition={{
                          ...animationVariants.message.transition,
                          delay: isMobile ? 0 : index * 0.1,
                        }}
                        className="p-3 hover:bg-paleYellow text-start cursor-pointer border-b border-yellow/20 last:border-b-0 text-sm sm:text-base transition-colors duration-150"
                        onClick={() => handlePromptClick(prompt)}
                      >
                        {prompt}
                      </motion.div>
                    ))}
                  </motion.div>
                )}
              </AnimatePresence>
            </div>
          </div>

          {/* Send button */}
          <motion.button
            whileHover={isMobile ? {} : { scale: 1.1, rotate: -15 }}
            whileTap={{ scale: 0.9, rotate: isMobile ? 0 : 15 }}
            style={{ borderRadius: "40% 60% 50% 45%" }}
            className="p-3 bg-yellow text-white cursor-pointer rounded-full hover:bg-softYellow shadow-md flex-shrink-0 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200"
            onClick={handleSendMessage}
            disabled={
              (inputValue.trim() === "" && !imagePreview) ||
              isCompletingText ||
              isCompressingImage
            }
          >
            <Send size={18} />
          </motion.button>
        </div>
      </div>

      {/* Report Modal */}
      <AnimatePresence>
        <ReportModal
          isOpen={showReportModal}
          onClose={onClose}
          messageId={activeMessageId}
          messageText={messages.find((m) => m.id === activeMessageId)?.text}
          messageTimestamp={
            messages.find((m) => m.id === activeMessageId)?.timestamp
          }
          closeExtraPart={() => setActiveMessageId(null)}
        />
      </AnimatePresence>

      {/* Explanation Modal */}
      <ExplanationModal
        showExplanationModal={showExplanationModal}
        setShowExplanationModal={setShowExplanationModal}
        currentToolName={currentToolName}
        currentExplanation={currentExplanation}
      />
    </div>
  );
}
