import React, { useEffect, useState, useRef, useCallback } from "react";
import { motion, AnimatePresence } from "framer-motion";
import Lottie from "lottie-react";
import HeroChat from "./HeroChat";
import { useAppContext } from "@/context/AppContext";
import MateyGfx from "../../../public/MatteyNobg.json";

export function MobileMock() {
  const {
    showExplanationModal,
    isMobileChatOpened,
    setIsMobileChatOpened,
    isMobileFullHeight,
    isChatFullScreen,
    setIsChatFullScreen,
  } = useAppContext();

  const [deviceHeight, setDeviceHeight] = useState(0);
  const [isKeyboardOpen, setIsKeyboardOpen] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const containerRef = useRef < HTMLDivElement > null;
  const chatContainerRef = useRef < HTMLDivElement > null;

  // Device height and mobile detection
  useEffect(() => {
    const handleResize = () => {
      setDeviceHeight(window.innerHeight);
      setIsMobile(window.innerWidth <= 768);
    };

    window.addEventListener("resize", handleResize);
    handleResize();

    return () => {
      window.removeEventListener("resize", handleResize);
    };
  }, []);

  // Keyboard detection and viewport management
  useEffect(() => {
    if (!isMobile) return;

    const visualViewport = window.visualViewport;
    if (!visualViewport) return;

    const handleViewportChange = () => {
      const currentHeight = visualViewport.height;
      const screenHeight = window.screen.height;
      const keyboardHeight = screenHeight - currentHeight;

      // Keyboard is considered open if more than 150px of height is lost
      const keyboardOpen = keyboardHeight > 150;
      setIsKeyboardOpen(keyboardOpen);

      if (keyboardOpen) {
        // Keyboard opened - enter full screen and focus on container
        setIsChatFullScreen(true);
        setIsMobileChatOpened(true);

        // Align keyboard top edge with grey border
        setTimeout(() => {
          if (chatContainerRef.current) {
            chatContainerRef.current.scrollIntoView({
              behavior: "smooth",
              block: "end",
            });
          }
        }, 100);
      } else {
        // Keyboard closed - exit full screen and refocus container
        setIsChatFullScreen(false);

        setTimeout(() => {
          if (containerRef.current) {
            containerRef.current.scrollIntoView({
              behavior: "smooth",
              block: "end",
            });
          }
        }, 100);
      }
    };

    visualViewport.addEventListener("resize", handleViewportChange);
    return () => {
      visualViewport.removeEventListener("resize", handleViewportChange);
    };
  }, [isMobile, setIsChatFullScreen, setIsMobileChatOpened]);

  // Auto-focus and chat opening - ensure proper frame view on load
  useEffect(() => {
    if (isMobile) {
      // Ensure both Matey and input are visible on load
      setTimeout(() => {
        if (containerRef.current) {
          containerRef.current.scrollIntoView({
            behavior: "smooth",
            block: "end", // Changed to 'start' to show Matey and input together
          });
        }
      }, 500);
    }
  }, [isMobile]);

  // Focus on chat container when writing
  const handleChatFocus = useCallback(() => {
    if (isMobile && containerRef.current) {
      setTimeout(() => {
        containerRef.current?.scrollIntoView({
          behavior: "smooth",
          block: "end",
        });
      }, 100);
    }
  }, [isMobile]);

  // Calculate chat container height - optimized for better frame view
  const getChatHeight = () => {
    if (isChatFullScreen) return "h-[100vh]";

    if (deviceHeight < 660) {
      return "h-[420px]"; // Reduced to fit better with Matey in frame
    } else {
      return isMobileFullHeight ? "h-[440px]" : "h-[440px]"; // Optimized heights
    }
  };

  // Calculate image margins for proper positioning - align thumb with chat edge
  const getImageMargins = () => {
    if (deviceHeight < 660) {
      return "-mb-[240px] -mt-2"; // Adjusted to align thumb with chat edge
    } else {
      return "-mb-[120px]"; // Adjusted to align thumb with chat edge
    }
  };

  return (
    <div
      ref={containerRef}
      className={`w-full mt-5 ${
        isMobileChatOpened ? "mt-0" : "mt-0"
      } -mb-2 h-full flex lg:flex-row flex-col p-0 lg:justify-start 
      text-center
      justify-center
      items-center
      relative`}
    >
      {/* Lottie Animation - Hidden when chat is full screen */}
      <AnimatePresence>
        {!isChatFullScreen && (
          <motion.div
            initial={{ opacity: 0, scale: 0.3 }}
            animate={{ opacity: 1, scale: 0.4 }}
            exit={{ opacity: 0, scale: 0.3 }}
            transition={{ duration: 0.3 }}
          >
            <Lottie
              className={`absolute ${
                showExplanationModal ? "z-0" : "z-40"
              } -top-[58px] -left-[275px] w-[1px] h-[1px] ${
                isMobileFullHeight ? "hidden" : ""
              }`}
              animationData={MateyGfx}
              style={{
                width: "100%",
                height: "auto",
              }}
              loop={true}
            />
          </motion.div>
        )}
      </AnimatePresence>

      <div className="hidden lg:flex"></div>

      {/* Mobile Matey Image - Hidden when chat is full screen */}
      <AnimatePresence>
        {!isChatFullScreen && (
          <motion.div
            initial={{ opacity: 0, y: 180 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -180 }}
            transition={{ duration: 0.3 }}
            className="lg:hidden w-full h-full"
          >
            {/* spacer */}
            {/* make the image a bit down */}
            <img
              loading="lazy"
              src="/assets/matey/langingMatey.svg"
              alt="Matey Character"
              className={`w-96 h-96 mx-auto ${getImageMargins()}`}
            />
          </motion.div>
        )}
      </AnimatePresence>

      {/* Chat Container with Grey Border */}
      <motion.div
        ref={chatContainerRef}
        className={`lg:w-[480px] ${getChatHeight()} w-[98%] mx-auto lg:mx-0
          lg:mb-10 lg:ml-20 z-10 md:rounded-[1.8rem] rounded-2xl
          ${isMobileChatOpened ? (deviceHeight < 660 ? "mt-10" : "") : "-mt-10"}
          ${
            isChatFullScreen
              ? "fixed inset-0 w-full max-w-none rounded-none lg:ml-0 lg:mb-0 mt-0"
              : ""
          }
          bg-gradient-to-t from-slate-300 to-softYellow
          transition-all duration-300 ease-in-out
          ${isChatFullScreen ? "p-1" : "p-1"}
        `}
        layout
        onFocus={handleChatFocus}
        onClick={handleChatFocus}
        initial={false}
        animate={{
          scale: isChatFullScreen ? 1 : 1,
          borderRadius: isChatFullScreen ? 0 : 24,
        }}
        transition={{ duration: 0.3, ease: "easeInOut" }}
      >
        {/* Inner container with proper background */}
        <div
          className={`w-full h-full ${
            isChatFullScreen
              ? "rounded-none"
              : "rounded-2xl md:rounded-[1.7rem]"
          } overflow-hidden bg-white
          `}
        >
          <HeroChat />
        </div>
      </motion.div>

      {/* Overlay to help with focus when keyboard is open */}
      <AnimatePresence>
        {isChatFullScreen && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 0.1 }}
            exit={{ opacity: 0 }}
            className="fixed inset-0 bg-black pointer-events-none z-0"
            style={{ zIndex: -1 }}
          />
        )}
      </AnimatePresence>
    </div>
  );
}
